import pandas as pd
import re
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt

file_path = '/content/used_car_dataset.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset and summary info
data.head(), data.info()

# Clean 'car_price_in_rupees' by removing currency symbols and words like "Lakh"
def clean_price(price):
    # Remove non-numeric characters except for period
    price = re.sub(r'[^\d.]', '', price)
    # Convert to float and adjust for "Lakh" (if necessary)
    if 'Lakh' in price:
        price = float(price) * 100000
    else:
        price = float(price)
    return price

data['car_price_in_rupees'] = data['car_price_in_rupees'].apply(clean_price)

# Clean 'kms_driven' by removing " km" and commas, and convert to integer
data['kms_driven'] = data['kms_driven'].str.replace(' km', '').str.replace(',', '').astype(int)

# Check for duplicates and remove them
data = data.drop_duplicates()

# Display the cleaned data and check for missing values
data.head(), data.isnull().sum()

# Assuming the current year is 2024
data['car_age'] = 2024 - data['year_of_manufacture']

# Select only numeric columns
numeric_data = data.select_dtypes(include=[float, int])

# Calculate the correlation matrix
correlation_matrix = numeric_data.corr()

# Display correlation with car_price_in_rupees
print(correlation_matrix['car_price_in_rupees'].sort_values(ascending=False))

X = data[['kms_driven', 'fuel_type', 'city', 'car_age']]
y = data['car_price_in_rupees']

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', SimpleImputer(strategy='mean'), ['kms_driven', 'car_age']),
        ('cat', OneHotEncoder(), ['fuel_type', 'city'])
    ])

# Create a pipeline that first preprocesses the data and then applies linear regression
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', LinearRegression())
])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the model
pipeline.fit(X_train, y_train)

# Make predictions
y_pred = pipeline.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")
print(f"Mean Squared Error: {mse}")

# Print coefficients
print("Model coefficients:", pipeline.named_steps['model'].coef_)
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('Actual Car Prices')
plt.ylabel('Predicted Car Prices')
plt.title('Actual vs Predicted Car Prices')
plt.show()

# Plot residuals
residuals = y_test - y_pred
plt.scatter(y_pred, residuals, alpha=0.5)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('Predicted Car Prices')
plt.ylabel('Residuals')
plt.title('Residuals vs Predicted Car Prices')
plt.show()
